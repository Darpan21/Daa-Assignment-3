* Fractional Knapsack GeeksForGeeks Implementation of Fractional KnapSack TC: O(n log n) (Problem Statement: The weight of N items and their corresponding values are given. We have to put these items in aknapsack of weight W such that the total value obtained is maximized.)

class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
        self.ratio = value / weight  # Value to weight ratio

def fractional_knapsack(items, capacity):
    # Sort items by their value to weight ratio in descending order
    items.sort(key=lambda x: x.ratio, reverse=True)
    
    total_value = 0.0  # Total value accumulated in the knapsack
    for item in items:
        if capacity == 0:  # If the knapsack is full, break the loop
            break
            
        if item.weight <= capacity:
            # If the item can be fully accommodated
            total_value += item.value
            capacity -= item.weight
        else:
            # Take the fraction of the remaining weight
            total_value += item.ratio * capacity
            capacity = 0  # Knapsack is now full

    return total_value

# Example usage
if __name__ == "__main__":
    items = [Item(60, 10), Item(100, 20), Item(120, 30)]  # (value, weight)
    capacity = 50
    max_value = fractional_knapsack(items, capacity)
    print(f"Maximum value in Knapsack = {max_value:.2f}")
