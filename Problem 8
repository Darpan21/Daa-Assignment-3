* Merge Intervals Leetcode problem number: 56

def merge_intervals(intervals):
    """
    Merges overlapping intervals in a list of intervals.

    Args:
        intervals: A list of intervals, where each interval is a list of two integers representing the start and end points.

    Returns:
        A list of non-overlapping intervals that cover all the intervals in the input list.
    """

    intervals.sort(key=lambda x: x[0])

    merged_intervals = []
    for interval in intervals:
        if not merged_intervals or merged_intervals[-1][1] < interval[0]:
            merged_intervals.append(interval)
        else:
            merged_intervals[-1][1] = max(merged_intervals[-1][1], interval[1])

    return merged_intervals

# Example usage
intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]
merged_intervals = merge_intervals(intervals)
print("Merged intervals:", merged_intervals)

Explanation

Sort: Sort the list of intervals in ascending order based on the start time of each interval.
Init: Create a new empty list named merged_intervals 
Loop over: Start iterating over the sorted list of intervals.
Check Overlap: If the current interval does not overlap with the last added one in the list merged_intervals, add the current interval to the list merged_intervals.
Merge: If the current interval overlaps with the last element of merged_intervals, update the end time of the last element to be the maximum of the end times of the two elements.
Return: Return the final list of merged_intervals.

Output:

Merged intervals: [[1, 6], [8, 10], [15, 18]]
