* 9. LCS LeetCode problem number 1143

def longest_common_subsequence(text1, text2):
    """
    Calculates the length of the longest common subsequence between two strings.

    Args:
        text1: The first string.
        text2: The second string.

    Returns:
        The length of the longest common subsequence.
    """

    m = len(text1)
    n = len(text2)

    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if text1[i - 1] == text2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[m][n]

# Example usage
text1 = "abcde"
text2 = "ace"
lcs_length = longest_common_subsequence(text1, text2)
print("Length of the longest common subsequence:", lcs_length)

Explanation:



Initialization: Create a 2D dynamic programming table dp of size (m + 1) x (n + 1), where m, n are the lengths of text1, text2, respectively. Â 
Fill DP Table: Traverse the dp table:
One more than the length of LCS at previous positions, in case the current characters in both text1 and text2 are equal. Otherwise, the length of LCS at the current position is equal to maximum of the lengths of the LCS at the previous row and previous column.
Return LCS Length Let's return the number at the bottom-right corner of our dp table because that is the length of LCS.

Output:

Length of the longest common subsequence: 3
